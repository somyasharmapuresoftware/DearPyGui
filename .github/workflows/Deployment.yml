name: Deployment

on:

  schedule:
    - cron: '0 12 * * 0'

  workflow_dispatch:

    branches:
      - master
      - development
      - development_*

    inputs:
    
      version:
        description: 'Dear PyGui Version'
        required: false
        default: '0.0.1'
    
      deploy:
        description: 'Deploy (true will deploy to pypi)'
        required: false
        default: 'false'
    
      deploytest:
        description: 'Deploy (true will deploy to test pypi)'
        required: false
        default: 'false'

jobs:

  build-windows-wheels:

    runs-on: windows-2019
    strategy:
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9, "3.10" ]

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Retrieve submodules
      shell: cmd
      run: |
        git submodule update --init --recursive ./Dependencies/imgui
        git submodule update --init --recursive ./Dependencies/freetype
      
    - name: Mark Versions
      shell: cmd
      run: |
        cd %GITHUB_WORKSPACE%
        echo ${{ github.event.inputs.version }} > version_number.txt

    - name: Build Wheel
      shell: cmd
      run: |
        cd %GITHUB_WORKSPACE%
        python -m pip install --upgrade pip twine wheel
        python -m setup bdist_wheel --plat-name win_amd64 --dist-dir dist
    
    - name: Upload Windows ${{ matrix.python-version }} Wheel
      uses: actions/upload-artifact@v2
      with:
        name: windowsbuild${{ matrix.python-version }}
        path: ${{ github.workspace }}/dist/*.whl
        retention-days: 2

  build-mac10-wheels:

    runs-on: macos-10.15
    strategy:
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9, "3.10" ]

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Retrieve submodules
      run: |
        git submodule update --init --recursive ./Dependencies/imgui
        git submodule update --init --recursive ./Dependencies/freetype
        git submodule update --init --recursive ./Dependencies/glfw
    
    - name: Mark Versions
      run: |
        cd $GITHUB_WORKSPACE
        echo ${{ github.event.inputs.version }} > version_number.txt

    - name: Build Wheel
      run: |
        cd $GITHUB_WORKSPACE
        python -m pip install --upgrade pip twine wheel
        python -m setup bdist_wheel --plat-name macosx-10.6-x86_64 --dist-dir dist
   
    - name: Upload MacOS 10.15 ${{ matrix.python-version }} Wheel
      uses: actions/upload-artifact@v2
      with:
        name: apple10build${{ matrix.python-version }}
        path: ${{ github.workspace }}/dist/*.whl
        retention-days: 2

  build-linux-wheels:

    runs-on: ubuntu-18.04
    env:
      CXX: g++-9
    strategy:
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9, "3.10" ]

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Retrieve submodules/Dependencies
      run: |
        git submodule update --init --recursive ./Dependencies/imgui
        git submodule update --init --recursive ./Dependencies/freetype
        git submodule update --init --recursive ./Dependencies/glfw
        sudo apt-get update
        sudo apt-get install libglu1-mesa-dev libgl1-mesa-dev xorg-dev libxrandr-dev -y
        sudo apt-get install libfreetype6-dev -y
        sudo apt-get install libharfbuzz-dev -y
    
    - name: Mark Versions
      run: |
        cd $GITHUB_WORKSPACE
        echo ${{ github.event.inputs.version }} > version_number.txt

    - name: Build Wheel
      run: |
        cd $GITHUB_WORKSPACE
        python -m pip install --upgrade pip twine wheel
        python -m setup bdist_wheel --plat-name manylinux1_x86_64 --dist-dir dist

    - name: Upload Linux ${{ matrix.python-version }} Wheel
      uses: actions/upload-artifact@v2
      with:
        name: linuxbuild${{ matrix.python-version }}
        path: ${{ github.workspace }}/dist/*.whl
        retention-days: 2

  build-linux-aarch64-wheels:
    runs-on: ubuntu-18.04
    env:
      img: quay.io/pypa/manylinux2014_aarch64
    strategy:
      matrix:
        python-version: ['cp36-cp36m', 'cp37-cp37m', 'cp38-cp38', 'cp39-cp39', 'cp310-cp310']
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Building Linux Aarch64 Wheel
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
        ${{ env.img }} \
        bash -exc 'echo "Retrieve submodules/Dependencies" && \
        git submodule update --init --recursive ./Dependencies/imgui && \
        git submodule update --init --recursive ./Dependencies/freetype && \
        git submodule update --init --recursive ./Dependencies/glfw && \
        yum update -y && \
        yum install mesa-libGLU-devel mesa-libGL-devel xorg-x11-server-devel libXrandr-devel freetype-devel harfbuzz gcc python3-devel libffi-devel wget curl libXinerama-devel libXcursor-devel libXi-devel -y && \
        echo "Mark Versions" && \
        echo ${{ github.event.inputs.version }} > version_number.txt && \
        echo "Build Wheel" && \
        wget https://ftp.openssl.org/source/old/1.1.1/openssl-1.1.1.tar.gz --no-check-certificate && \
        tar xvf openssl-1.1.1.tar.gz && cd openssl-1.1.1/ && \
        ./config --prefix=/usr --openssldir=/etc/ssl --libdir=lib no-shared zlib-dynamic && \
        make && make install && \
        cd .. && \
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain=stable && \
        source $HOME/.cargo/env && \
        pip3 install -U pip && \
        pip3 install cryptography twine wheel setuptools && \
        python3 -m setup bdist_wheel --plat-name manylinux2014_aarch64 --dist-dir dist'
    - name: Upload Linux Arch64 ${{ matrix.python-version }} Wheel
      uses: actions/upload-artifact@v2
      with:
        name: linuxaarch64build${{ matrix.python-version }}
        path: ${{ github.workspace }}/dist/*.whl
        retention-days: 2

  deploy-packages:

    needs: [build-windows-wheels, build-mac10-wheels, build-linux-wheels, build-linux-aarch64-wheels]
    runs-on: windows-2019

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel twine

    - name: Download artifacts
      uses: actions/download-artifact@v2

    - name: PyPi Deployment
      shell: cmd
      if: ${{contains(github.event.inputs.deploy, 'true') && github.ref == 'refs/heads/master'}}
      run: |
        python -m twine upload windowsbuild*/* -u __token__ -p ${{ secrets.PYPI_PASSWORD }} --skip-existing
        python -m twine upload apple10build*/* -u __token__ -p ${{ secrets.PYPI_PASSWORD }} --skip-existing
        python -m twine upload linuxbuild*/* -u __token__ -p ${{ secrets.PYPI_PASSWORD }} --skip-existing
        python -m twine upload linuxaarch64build*/* -u __token__ -p ${{ secrets.PYPI_PASSWORD }} --skip-existing

    - name: Test PyPi Deployment
      shell: cmd
      if: "contains(github.event.inputs.deploytest, 'true')"
      run: |
        dir
        python -m twine upload --repository testpypi windowsbuild*/* -u __token__ -p ${{ secrets.TEST_PYPI_PASSWORD }} --skip-existing
        python -m twine upload --repository testpypi apple10build*/* -u __token__ -p ${{ secrets.TEST_PYPI_PASSWORD }} --skip-existing
        python -m twine upload --repository testpypi linuxbuild*/* -u __token__ -p ${{ secrets.TEST_PYPI_PASSWORD }} --skip-existing
        python -m twine upload --repository testpypi linuxaarch64build*/* -u __token__ -p ${{ secrets.TEST_PYPI_PASSWORD }} --skip-existing
